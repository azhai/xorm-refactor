// Code generated by "enumer -type=StrCmp -text"; DO NOT EDIT.

//
package strcmp

import (
	"fmt"
)

const _StrCmpName = "OmitContainsStartsWithEndsWithCaseInsensitiveIgnoreSpacesEqual"

var _StrCmpIndex = [...]uint8{0, 4, 12, 22, 30, 45, 57, 62}

func (i StrCmp) String() string {
	if i < 0 || i >= StrCmp(len(_StrCmpIndex)-1) {
		return fmt.Sprintf("StrCmp(%d)", i)
	}
	return _StrCmpName[_StrCmpIndex[i]:_StrCmpIndex[i+1]]
}

var _StrCmpValues = []StrCmp{0, 1, 2, 3, 4, 5, 6}

var _StrCmpNameToValueMap = map[string]StrCmp{
	_StrCmpName[0:4]:   0,
	_StrCmpName[4:12]:  1,
	_StrCmpName[12:22]: 2,
	_StrCmpName[22:30]: 3,
	_StrCmpName[30:45]: 4,
	_StrCmpName[45:57]: 5,
	_StrCmpName[57:62]: 6,
}

// StrCmpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StrCmpString(s string) (StrCmp, error) {
	if val, ok := _StrCmpNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StrCmp values", s)
}

// StrCmpValues returns all values of the enum
func StrCmpValues() []StrCmp {
	return _StrCmpValues
}

// IsAStrCmp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StrCmp) IsAStrCmp() bool {
	for _, v := range _StrCmpValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for StrCmp
func (i StrCmp) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for StrCmp
func (i *StrCmp) UnmarshalText(text []byte) error {
	var err error
	*i, err = StrCmpString(string(text))
	return err
}
