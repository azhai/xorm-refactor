// Code generated by "enumer -type=JoinOp -transform=kebab -text"; DO NOT EDIT.

//
package join

import (
	"fmt"
)

const _JoinOpName = "joininner-joinouter-joincross-join"

var _JoinOpIndex = [...]uint8{0, 4, 14, 24, 34}

func (i JoinOp) String() string {
	if i < 0 || i >= JoinOp(len(_JoinOpIndex)-1) {
		return fmt.Sprintf("JoinOp(%d)", i)
	}
	return _JoinOpName[_JoinOpIndex[i]:_JoinOpIndex[i+1]]
}

var _JoinOpValues = []JoinOp{0, 1, 2, 3}

var _JoinOpNameToValueMap = map[string]JoinOp{
	_JoinOpName[0:4]:   0,
	_JoinOpName[4:14]:  1,
	_JoinOpName[14:24]: 2,
	_JoinOpName[24:34]: 3,
}

// JoinOpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JoinOpString(s string) (JoinOp, error) {
	if val, ok := _JoinOpNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JoinOp values", s)
}

// JoinOpValues returns all values of the enum
func JoinOpValues() []JoinOp {
	return _JoinOpValues
}

// IsAJoinOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JoinOp) IsAJoinOp() bool {
	for _, v := range _JoinOpValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for JoinOp
func (i JoinOp) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for JoinOp
func (i *JoinOp) UnmarshalText(text []byte) error {
	var err error
	*i, err = JoinOpString(string(text))
	return err
}
