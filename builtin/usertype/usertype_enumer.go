// Code generated by "enumer -type=UserType -text"; DO NOT EDIT.

//
package usertype

import (
	"fmt"
)

const _UserTypeName = "AnonymousForbiddenLimitedRegularSuper"

var _UserTypeIndex = [...]uint8{0, 9, 18, 25, 32, 37}

func (i UserType) String() string {
	if i < 0 || i >= UserType(len(_UserTypeIndex)-1) {
		return fmt.Sprintf("UserType(%d)", i)
	}
	return _UserTypeName[_UserTypeIndex[i]:_UserTypeIndex[i+1]]
}

var _UserTypeValues = []UserType{0, 1, 2, 3, 4}

var _UserTypeNameToValueMap = map[string]UserType{
	_UserTypeName[0:9]:   0,
	_UserTypeName[9:18]:  1,
	_UserTypeName[18:25]: 2,
	_UserTypeName[25:32]: 3,
	_UserTypeName[32:37]: 4,
}

// UserTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserTypeString(s string) (UserType, error) {
	if val, ok := _UserTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserType values", s)
}

// UserTypeValues returns all values of the enum
func UserTypeValues() []UserType {
	return _UserTypeValues
}

// IsAUserType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserType) IsAUserType() bool {
	for _, v := range _UserTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for UserType
func (i UserType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserType
func (i *UserType) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserTypeString(string(text))
	return err
}
