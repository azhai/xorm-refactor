// Code generated by "enumer -type=Action -text"; DO NOT EDIT.

//
package action

import (
	"fmt"
)

const (
	_ActionName_0 = "Noop"
	_ActionName_1 = "View"
	_ActionName_2 = "Draft"
	_ActionName_3 = "Delete"
	_ActionName_4 = "Add"
	_ActionName_5 = "Edit"
	_ActionName_6 = "Export"
	_ActionName_7 = "Batch"
)

var (
	_ActionIndex_0 = [...]uint8{0, 4}
	_ActionIndex_1 = [...]uint8{0, 4}
	_ActionIndex_2 = [...]uint8{0, 5}
	_ActionIndex_3 = [...]uint8{0, 6}
	_ActionIndex_4 = [...]uint8{0, 3}
	_ActionIndex_5 = [...]uint8{0, 4}
	_ActionIndex_6 = [...]uint8{0, 6}
	_ActionIndex_7 = [...]uint8{0, 5}
)

func (i Action) String() string {
	switch {
	case i == 0:
		return _ActionName_0
	case i == 4:
		return _ActionName_1
	case i == 8:
		return _ActionName_2
	case i == 16:
		return _ActionName_3
	case i == 32:
		return _ActionName_4
	case i == 64:
		return _ActionName_5
	case i == 128:
		return _ActionName_6
	case i == 256:
		return _ActionName_7
	default:
		return fmt.Sprintf("Action(%d)", i)
	}
}

var _ActionValues = []Action{0, 4, 8, 16, 32, 64, 128, 256}

var _ActionNameToValueMap = map[string]Action{
	_ActionName_0[0:4]: 0,
	_ActionName_1[0:4]: 4,
	_ActionName_2[0:5]: 8,
	_ActionName_3[0:6]: 16,
	_ActionName_4[0:3]: 32,
	_ActionName_5[0:4]: 64,
	_ActionName_6[0:6]: 128,
	_ActionName_7[0:5]: 256,
}

// ActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionString(s string) (Action, error) {
	if val, ok := _ActionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Action values", s)
}

// ActionValues returns all values of the enum
func ActionValues() []Action {
	return _ActionValues
}

// IsAAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Action) IsAAction() bool {
	for _, v := range _ActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Action
func (i Action) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Action
func (i *Action) UnmarshalText(text []byte) error {
	var err error
	*i, err = ActionString(string(text))
	return err
}
