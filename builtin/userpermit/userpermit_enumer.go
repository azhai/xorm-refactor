// Code generated by "enumer -type=UserPermit -text"; DO NOT EDIT.

//
package userpermit

import (
	"fmt"
)

const (
	_UserPermitName_0 = "NoopBatchView"
	_UserPermitName_1 = "Draft"
	_UserPermitName_2 = "Delete"
	_UserPermitName_3 = "Add"
	_UserPermitName_4 = "Edit"
	_UserPermitName_5 = "Export"
)

var (
	_UserPermitIndex_0 = [...]uint8{0, 4, 9, 13}
	_UserPermitIndex_1 = [...]uint8{0, 5}
	_UserPermitIndex_2 = [...]uint8{0, 6}
	_UserPermitIndex_3 = [...]uint8{0, 3}
	_UserPermitIndex_4 = [...]uint8{0, 4}
	_UserPermitIndex_5 = [...]uint8{0, 6}
)

func (i UserPermit) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _UserPermitName_0[_UserPermitIndex_0[i]:_UserPermitIndex_0[i+1]]
	case i == 4:
		return _UserPermitName_1
	case i == 8:
		return _UserPermitName_2
	case i == 16:
		return _UserPermitName_3
	case i == 32:
		return _UserPermitName_4
	case i == 64:
		return _UserPermitName_5
	default:
		return fmt.Sprintf("UserPermit(%d)", i)
	}
}

var _UserPermitValues = []UserPermit{0, 1, 2, 4, 8, 16, 32, 64}

var _UserPermitNameToValueMap = map[string]UserPermit{
	_UserPermitName_0[0:4]:  0,
	_UserPermitName_0[4:9]:  1,
	_UserPermitName_0[9:13]: 2,
	_UserPermitName_1[0:5]:  4,
	_UserPermitName_2[0:6]:  8,
	_UserPermitName_3[0:3]:  16,
	_UserPermitName_4[0:4]:  32,
	_UserPermitName_5[0:6]:  64,
}

// UserPermitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserPermitString(s string) (UserPermit, error) {
	if val, ok := _UserPermitNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserPermit values", s)
}

// UserPermitValues returns all values of the enum
func UserPermitValues() []UserPermit {
	return _UserPermitValues
}

// IsAUserPermit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserPermit) IsAUserPermit() bool {
	for _, v := range _UserPermitValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for UserPermit
func (i UserPermit) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UserPermit
func (i *UserPermit) UnmarshalText(text []byte) error {
	var err error
	*i, err = UserPermitString(string(text))
	return err
}
