// Code generated by "enumer -type=SqlJoin -transform=BLANK -text"; DO NOT EDIT.

//
package enums

import (
	"fmt"
)

const (
	_SqlJoinName_0 = "JOININNER JOINOUTER JOINCROSS JOINLEFT JOINLEFT INNER JOINLEFT OUTER JOIN"
	_SqlJoinName_1 = "RIGHT JOINRIGHT INNER JOINRIGHT OUTER JOIN"
)

var (
	_SqlJoinIndex_0 = [...]uint8{0, 4, 14, 24, 34, 43, 58, 73}
	_SqlJoinIndex_1 = [...]uint8{0, 10, 26, 42}
)

func (i SqlJoin) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _SqlJoinName_0[_SqlJoinIndex_0[i]:_SqlJoinIndex_0[i+1]]
	case 8 <= i && i <= 10:
		i -= 8
		return _SqlJoinName_1[_SqlJoinIndex_1[i]:_SqlJoinIndex_1[i+1]]
	default:
		return fmt.Sprintf("SqlJoin(%d)", i)
	}
}

var _SqlJoinValues = []SqlJoin{0, 1, 2, 3, 4, 5, 6, 8, 9, 10}

var _SqlJoinNameToValueMap = map[string]SqlJoin{
	_SqlJoinName_0[0:4]:   0,
	_SqlJoinName_0[4:14]:  1,
	_SqlJoinName_0[14:24]: 2,
	_SqlJoinName_0[24:34]: 3,
	_SqlJoinName_0[34:43]: 4,
	_SqlJoinName_0[43:58]: 5,
	_SqlJoinName_0[58:73]: 6,
	_SqlJoinName_1[0:10]:  8,
	_SqlJoinName_1[10:26]: 9,
	_SqlJoinName_1[26:42]: 10,
}

// SqlJoinString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SqlJoinString(s string) (SqlJoin, error) {
	if val, ok := _SqlJoinNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SqlJoin values", s)
}

// SqlJoinValues returns all values of the enum
func SqlJoinValues() []SqlJoin {
	return _SqlJoinValues
}

// IsASqlJoin returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SqlJoin) IsASqlJoin() bool {
	for _, v := range _SqlJoinValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for SqlJoin
func (i SqlJoin) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SqlJoin
func (i *SqlJoin) UnmarshalText(text []byte) error {
	var err error
	*i, err = SqlJoinString(string(text))
	return err
}
